import "platform:/resource/PolymerModel/model/PolymerModel.ecore"

rule createEdge() {
	node1 : Atom {
		++ -next->node2
	}
	node2 : Atom
} when notConnected12 @ 1.0

rule deleteVertex{
	-- node1 : Atom
} @ 0.025

rule createVertex{
	container : Container {
		++ -atoms->node1
	}
	++ node1 : Atom
} @ 1.0

rule deleteEdge() {
	node1 : Atom {
		-- -next->node2
	}
	node2 : Atom	
} @ 0.025

rule bC2() {
	node1 : Atom {
		 -next->node3
	}
	node3 : Atom {
		++ -next-> node2
	}
	
	node2 : Atom {
		++ -next-> node1
	}
} when notConnected23 @ 1.0

rule cC2() {
	node1 : Atom {
		 -next->node3
	}
	node3 : Atom {
		-next-> node2
	}
	
	node2 : Atom {
		++ -next-> node1
	}
} when notConnected2 @ 1.0

condition notConnected1 = forbid connectedNode1
condition notConnected2 = forbid connectedNode2
condition notConnected3 = forbid connectedNode3
condition notConnected12 = notConnected1 && notConnected2
condition notConnected23 = notConnected2 && notConnected3

pattern connectedNode1() {
	node1 : Atom {
		-next->node
	}
	
	node : Atom
}

pattern connectedNode2() {
	node2 : Atom {
		-next->node
	}
	
	node : Atom
}

pattern connectedNode3() {
	node3 : Atom {
		-next->node
	}
	
	node : Atom
}

//Observations
pattern triangle {
	node1 : Atom {
		 -next->node3
	}
	node3 : Atom {
		-next-> node2
	}
	
	node2 : Atom {
		-next-> node1
	}
}
